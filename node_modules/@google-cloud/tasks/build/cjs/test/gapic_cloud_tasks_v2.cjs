"use strict";

var protos = _interopRequireWildcard(require("../../protos/protos.cjs"));
var _assert = _interopRequireDefault(require("assert"));
var sinon = _interopRequireWildcard(require("sinon"));
var _mocha = require("mocha");
var cloudtasksModule = _interopRequireWildcard(require("../src/index.cjs"));
var _stream = require("stream");
var _googleGax = require("google-gax");
var _fs = _interopRequireDefault(require("fs"));
var _path = _interopRequireDefault(require("path"));
var _url = require("url");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _asyncIterator(r) { var n, t, o, e = 2; for ("undefined" != typeof Symbol && (t = Symbol.asyncIterator, o = Symbol.iterator); e--;) { if (t && null != (n = r[t])) return n.call(r); if (o && null != (n = r[o])) return new AsyncFromSyncIterator(n.call(r)); t = "@@asyncIterator", o = "@@iterator"; } throw new TypeError("Object is not async iterable"); }
function AsyncFromSyncIterator(r) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + " is not an object.")); var n = r.done; return Promise.resolve(r.value).then(function (r) { return { value: r, done: n }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(r) { this.s = r, this.n = r.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, "return": function _return(r) { var n = this.s["return"]; return void 0 === n ? Promise.resolve({ value: r, done: !0 }) : AsyncFromSyncIteratorContinuation(n.apply(this.s, arguments)); }, "throw": function _throw(r) { var n = this.s["return"]; return void 0 === n ? Promise.reject(r) : AsyncFromSyncIteratorContinuation(n.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(r); } // Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
// @ts-ignore
// @ts-ignore
var dirname = __dirname;
// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
var root = _googleGax.protobuf.Root.fromJSON(JSON.parse(_fs["default"].readFileSync(_path["default"].join(dirname, '..', '..', 'protos/protos.json'), 'utf8')));

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName, fields) {
  var _type$fields$fields$d, _type;
  var type = root.lookupType(typeName);
  var _iterator7 = _createForOfIteratorHelper(fields.slice(0, -1)),
    _step7;
  try {
    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
      var _type2;
      var field = _step7.value;
      type = (_type2 = type) === null || _type2 === void 0 || (_type2 = _type2.fields[field]) === null || _type2 === void 0 ? void 0 : _type2.resolvedType;
    }
  } catch (err) {
    _iterator7.e(err);
  } finally {
    _iterator7.f();
  }
  return (_type$fields$fields$d = (_type = type) === null || _type === void 0 || (_type = _type.fields[fields[fields.length - 1]]) === null || _type === void 0 ? void 0 : _type.defaultValue) !== null && _type$fields$fields$d !== void 0 ? _type$fields$fields$d : null;
}
function generateSampleMessage(instance) {
  var filledObject = instance.constructor.toObject(instance, {
    defaults: true
  });
  return instance.constructor.fromObject(filledObject);
}
function stubSimpleCall(response, error) {
  return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}
function stubSimpleCallWithCallback(response, error) {
  return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}
function stubPageStreamingCall(responses, error) {
  var pagingStub = sinon.stub();
  if (responses) {
    for (var i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  var transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
  var mockStream = new _stream.PassThrough({
    objectMode: true,
    transform: transformStub
  });
  // trigger as many responses as needed
  if (responses) {
    for (var _i = 0; _i < responses.length; ++_i) {
      setImmediate(function () {
        mockStream.write({});
      });
    }
    setImmediate(function () {
      mockStream.end();
    });
  } else {
    setImmediate(function () {
      mockStream.write({});
    });
    setImmediate(function () {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}
function stubAsyncIterationCall(responses, error) {
  var counter = 0;
  var asyncIterable = _defineProperty({}, Symbol.asyncIterator, function () {
    return {
      next: function next() {
        return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                if (!error) {
                  _context.next = 2;
                  break;
                }
                return _context.abrupt("return", Promise.reject(error));
              case 2:
                if (!(counter >= responses.length)) {
                  _context.next = 4;
                  break;
                }
                return _context.abrupt("return", Promise.resolve({
                  done: true,
                  value: undefined
                }));
              case 4:
                return _context.abrupt("return", Promise.resolve({
                  done: false,
                  value: responses[counter++]
                }));
              case 5:
              case "end":
                return _context.stop();
            }
          }, _callee);
        }))();
      }
    };
  });
  return sinon.stub().returns(asyncIterable);
}
(0, _mocha.describe)('v2.CloudTasksClient', function () {
  (0, _mocha.describe)('Common methods', function () {
    (0, _mocha.it)('has apiEndpoint', function () {
      var client = new cloudtasksModule.v2.CloudTasksClient();
      var apiEndpoint = client.apiEndpoint;
      _assert["default"].strictEqual(apiEndpoint, 'cloudtasks.googleapis.com');
    });
    (0, _mocha.it)('has universeDomain', function () {
      var client = new cloudtasksModule.v2.CloudTasksClient();
      var universeDomain = client.universeDomain;
      _assert["default"].strictEqual(universeDomain, 'googleapis.com');
    });
    if ((typeof process === "undefined" ? "undefined" : _typeof(process)) === 'object' && typeof process.emitWarning === 'function') {
      (0, _mocha.it)('throws DeprecationWarning if static servicePath is used', function () {
        var stub = sinon.stub(process, 'emitWarning');
        var servicePath = cloudtasksModule.v2.CloudTasksClient.servicePath;
        _assert["default"].strictEqual(servicePath, 'cloudtasks.googleapis.com');
        (0, _assert["default"])(stub.called);
        stub.restore();
      });
      (0, _mocha.it)('throws DeprecationWarning if static apiEndpoint is used', function () {
        var stub = sinon.stub(process, 'emitWarning');
        var apiEndpoint = cloudtasksModule.v2.CloudTasksClient.apiEndpoint;
        _assert["default"].strictEqual(apiEndpoint, 'cloudtasks.googleapis.com');
        (0, _assert["default"])(stub.called);
        stub.restore();
      });
    }
    (0, _mocha.it)('sets apiEndpoint according to universe domain camelCase', function () {
      var client = new cloudtasksModule.v2.CloudTasksClient({
        universeDomain: 'example.com'
      });
      var servicePath = client.apiEndpoint;
      _assert["default"].strictEqual(servicePath, 'cloudtasks.example.com');
    });
    (0, _mocha.it)('sets apiEndpoint according to universe domain snakeCase', function () {
      var client = new cloudtasksModule.v2.CloudTasksClient({
        universe_domain: 'example.com'
      });
      var servicePath = client.apiEndpoint;
      _assert["default"].strictEqual(servicePath, 'cloudtasks.example.com');
    });
    if ((typeof process === "undefined" ? "undefined" : _typeof(process)) === 'object' && 'env' in process) {
      (0, _mocha.describe)('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', function () {
        (0, _mocha.it)('sets apiEndpoint from environment variable', function () {
          var saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          var client = new cloudtasksModule.v2.CloudTasksClient();
          var servicePath = client.apiEndpoint;
          _assert["default"].strictEqual(servicePath, 'cloudtasks.example.com');
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });
        (0, _mocha.it)('value configured in code has priority over environment variable', function () {
          var saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          var client = new cloudtasksModule.v2.CloudTasksClient({
            universeDomain: 'configured.example.com'
          });
          var servicePath = client.apiEndpoint;
          _assert["default"].strictEqual(servicePath, 'cloudtasks.configured.example.com');
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });
      });
    }
    (0, _mocha.it)('does not allow setting both universeDomain and universe_domain', function () {
      _assert["default"]["throws"](function () {
        new cloudtasksModule.v2.CloudTasksClient({
          universe_domain: 'example.com',
          universeDomain: 'example.net'
        });
      });
    });
    (0, _mocha.it)('has port', function () {
      var port = cloudtasksModule.v2.CloudTasksClient.port;
      (0, _assert["default"])(port);
      (0, _assert["default"])(typeof port === 'number');
    });
    (0, _mocha.it)('should create a client with no option', function () {
      var client = new cloudtasksModule.v2.CloudTasksClient();
      (0, _assert["default"])(client);
    });
    (0, _mocha.it)('should create a client with gRPC fallback', function () {
      var client = new cloudtasksModule.v2.CloudTasksClient({
        fallback: true
      });
      (0, _assert["default"])(client);
    });
    (0, _mocha.it)('has initialize method and supports deferred initialization', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
      var client;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            _assert["default"].strictEqual(client.cloudTasksStub, undefined);
            _context2.next = 4;
            return client.initialize();
          case 4:
            (0, _assert["default"])(client.cloudTasksStub);
          case 5:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    })));
    (0, _mocha.it)('has close method for the initialized client', function (done) {
      var client = new cloudtasksModule.v2.CloudTasksClient({
        credentials: {
          client_email: 'bogus',
          private_key: 'bogus'
        },
        projectId: 'bogus'
      });
      client.initialize();
      (0, _assert["default"])(client.cloudTasksStub);
      client.close().then(function () {
        done();
      });
    });
    (0, _mocha.it)('has close method for the non-initialized client', function (done) {
      var client = new cloudtasksModule.v2.CloudTasksClient({
        credentials: {
          client_email: 'bogus',
          private_key: 'bogus'
        },
        projectId: 'bogus'
      });
      _assert["default"].strictEqual(client.cloudTasksStub, undefined);
      client.close().then(function () {
        done();
      });
    });
    (0, _mocha.it)('has getProjectId method', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
      var fakeProjectId, client, result;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            fakeProjectId = 'fake-project-id';
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            _context3.next = 5;
            return client.getProjectId();
          case 5:
            result = _context3.sent;
            _assert["default"].strictEqual(result, fakeProjectId);
            (0, _assert["default"])(client.auth.getProjectId.calledWithExactly());
          case 8:
          case "end":
            return _context3.stop();
        }
      }, _callee3);
    })));
    (0, _mocha.it)('has getProjectId method with callback', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
      var fakeProjectId, client, promise, result;
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            fakeProjectId = 'fake-project-id';
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            promise = new Promise(function (resolve, reject) {
              client.getProjectId(function (err, projectId) {
                if (err) {
                  reject(err);
                } else {
                  resolve(projectId);
                }
              });
            });
            _context4.next = 6;
            return promise;
          case 6:
            result = _context4.sent;
            _assert["default"].strictEqual(result, fakeProjectId);
          case 8:
          case "end":
            return _context4.stop();
        }
      }, _callee4);
    })));
  });
  (0, _mocha.describe)('getQueue', function () {
    (0, _mocha.it)('invokes getQueue without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, _yield$client$getQueu, _yield$client$getQueu2, response, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee5$(_context5) {
        while (1) switch (_context5.prev = _context5.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.GetQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.GetQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.cloud.tasks.v2.Queue());
            client.innerApiCalls.getQueue = stubSimpleCall(expectedResponse);
            _context5.next = 10;
            return client.getQueue(request);
          case 10:
            _yield$client$getQueu = _context5.sent;
            _yield$client$getQueu2 = _slicedToArray(_yield$client$getQueu, 1);
            response = _yield$client$getQueu2[0];
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.getQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.getQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 18:
          case "end":
            return _context5.stop();
        }
      }, _callee5);
    })));
    (0, _mocha.it)('invokes getQueue without error using callback', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, promise, response, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee6$(_context6) {
        while (1) switch (_context6.prev = _context6.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.GetQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.GetQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.cloud.tasks.v2.Queue());
            client.innerApiCalls.getQueue = stubSimpleCallWithCallback(expectedResponse);
            promise = new Promise(function (resolve, reject) {
              client.getQueue(request, function (err, result) {
                if (err) {
                  reject(err);
                } else {
                  resolve(result);
                }
              });
            });
            _context6.next = 11;
            return promise;
          case 11:
            response = _context6.sent;
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.getQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.getQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 17:
          case "end":
            return _context6.stop();
        }
      }, _callee6);
    })));
    (0, _mocha.it)('invokes getQueue with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee7$(_context7) {
        while (1) switch (_context7.prev = _context7.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.GetQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.GetQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.innerApiCalls.getQueue = stubSimpleCall(undefined, expectedError);
            _context7.next = 10;
            return _assert["default"].rejects(client.getQueue(request), expectedError);
          case 10:
            actualRequest = client.innerApiCalls.getQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.getQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 14:
          case "end":
            return _context7.stop();
        }
      }, _callee7);
    })));
    (0, _mocha.it)('invokes getQueue with closed client', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
      var client, request, defaultValue1, expectedError;
      return _regeneratorRuntime().wrap(function _callee8$(_context8) {
        while (1) switch (_context8.prev = _context8.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.GetQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.GetQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedError = new Error('The client has already been closed.');
            client.close();
            _context8.next = 9;
            return _assert["default"].rejects(client.getQueue(request), expectedError);
          case 9:
          case "end":
            return _context8.stop();
        }
      }, _callee8);
    })));
  });
  (0, _mocha.describe)('createQueue', function () {
    (0, _mocha.it)('invokes createQueue without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, _yield$client$createQ, _yield$client$createQ2, response, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee9$(_context9) {
        while (1) switch (_context9.prev = _context9.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.CreateQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.CreateQueueRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.cloud.tasks.v2.Queue());
            client.innerApiCalls.createQueue = stubSimpleCall(expectedResponse);
            _context9.next = 10;
            return client.createQueue(request);
          case 10:
            _yield$client$createQ = _context9.sent;
            _yield$client$createQ2 = _slicedToArray(_yield$client$createQ, 1);
            response = _yield$client$createQ2[0];
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.createQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.createQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 18:
          case "end":
            return _context9.stop();
        }
      }, _callee9);
    })));
    (0, _mocha.it)('invokes createQueue without error using callback', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, promise, response, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee10$(_context10) {
        while (1) switch (_context10.prev = _context10.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.CreateQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.CreateQueueRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.cloud.tasks.v2.Queue());
            client.innerApiCalls.createQueue = stubSimpleCallWithCallback(expectedResponse);
            promise = new Promise(function (resolve, reject) {
              client.createQueue(request, function (err, result) {
                if (err) {
                  reject(err);
                } else {
                  resolve(result);
                }
              });
            });
            _context10.next = 11;
            return promise;
          case 11:
            response = _context10.sent;
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.createQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.createQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 17:
          case "end":
            return _context10.stop();
        }
      }, _callee10);
    })));
    (0, _mocha.it)('invokes createQueue with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee11$(_context11) {
        while (1) switch (_context11.prev = _context11.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.CreateQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.CreateQueueRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.innerApiCalls.createQueue = stubSimpleCall(undefined, expectedError);
            _context11.next = 10;
            return _assert["default"].rejects(client.createQueue(request), expectedError);
          case 10:
            actualRequest = client.innerApiCalls.createQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.createQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 14:
          case "end":
            return _context11.stop();
        }
      }, _callee11);
    })));
    (0, _mocha.it)('invokes createQueue with closed client', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {
      var client, request, defaultValue1, expectedError;
      return _regeneratorRuntime().wrap(function _callee12$(_context12) {
        while (1) switch (_context12.prev = _context12.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.CreateQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.CreateQueueRequest', ['parent']);
            request.parent = defaultValue1;
            expectedError = new Error('The client has already been closed.');
            client.close();
            _context12.next = 9;
            return _assert["default"].rejects(client.createQueue(request), expectedError);
          case 9:
          case "end":
            return _context12.stop();
        }
      }, _callee12);
    })));
  });
  (0, _mocha.describe)('updateQueue', function () {
    (0, _mocha.it)('invokes updateQueue without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {
      var _request$queue;
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, _yield$client$updateQ, _yield$client$updateQ2, response, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee13$(_context13) {
        while (1) switch (_context13.prev = _context13.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.UpdateQueueRequest());
            (_request$queue = request.queue) !== null && _request$queue !== void 0 ? _request$queue : request.queue = {};
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.UpdateQueueRequest', ['queue', 'name']);
            request.queue.name = defaultValue1;
            expectedHeaderRequestParams = "queue.name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.cloud.tasks.v2.Queue());
            client.innerApiCalls.updateQueue = stubSimpleCall(expectedResponse);
            _context13.next = 11;
            return client.updateQueue(request);
          case 11:
            _yield$client$updateQ = _context13.sent;
            _yield$client$updateQ2 = _slicedToArray(_yield$client$updateQ, 1);
            response = _yield$client$updateQ2[0];
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.updateQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.updateQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 19:
          case "end":
            return _context13.stop();
        }
      }, _callee13);
    })));
    (0, _mocha.it)('invokes updateQueue without error using callback', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {
      var _request$queue2;
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, promise, response, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee14$(_context14) {
        while (1) switch (_context14.prev = _context14.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.UpdateQueueRequest());
            (_request$queue2 = request.queue) !== null && _request$queue2 !== void 0 ? _request$queue2 : request.queue = {};
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.UpdateQueueRequest', ['queue', 'name']);
            request.queue.name = defaultValue1;
            expectedHeaderRequestParams = "queue.name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.cloud.tasks.v2.Queue());
            client.innerApiCalls.updateQueue = stubSimpleCallWithCallback(expectedResponse);
            promise = new Promise(function (resolve, reject) {
              client.updateQueue(request, function (err, result) {
                if (err) {
                  reject(err);
                } else {
                  resolve(result);
                }
              });
            });
            _context14.next = 12;
            return promise;
          case 12:
            response = _context14.sent;
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.updateQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.updateQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 18:
          case "end":
            return _context14.stop();
        }
      }, _callee14);
    })));
    (0, _mocha.it)('invokes updateQueue with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {
      var _request$queue3;
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee15$(_context15) {
        while (1) switch (_context15.prev = _context15.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.UpdateQueueRequest());
            (_request$queue3 = request.queue) !== null && _request$queue3 !== void 0 ? _request$queue3 : request.queue = {};
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.UpdateQueueRequest', ['queue', 'name']);
            request.queue.name = defaultValue1;
            expectedHeaderRequestParams = "queue.name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.innerApiCalls.updateQueue = stubSimpleCall(undefined, expectedError);
            _context15.next = 11;
            return _assert["default"].rejects(client.updateQueue(request), expectedError);
          case 11:
            actualRequest = client.innerApiCalls.updateQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.updateQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 15:
          case "end":
            return _context15.stop();
        }
      }, _callee15);
    })));
    (0, _mocha.it)('invokes updateQueue with closed client', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {
      var _request$queue4;
      var client, request, defaultValue1, expectedError;
      return _regeneratorRuntime().wrap(function _callee16$(_context16) {
        while (1) switch (_context16.prev = _context16.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.UpdateQueueRequest());
            (_request$queue4 = request.queue) !== null && _request$queue4 !== void 0 ? _request$queue4 : request.queue = {};
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.UpdateQueueRequest', ['queue', 'name']);
            request.queue.name = defaultValue1;
            expectedError = new Error('The client has already been closed.');
            client.close();
            _context16.next = 10;
            return _assert["default"].rejects(client.updateQueue(request), expectedError);
          case 10:
          case "end":
            return _context16.stop();
        }
      }, _callee16);
    })));
  });
  (0, _mocha.describe)('deleteQueue', function () {
    (0, _mocha.it)('invokes deleteQueue without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, _yield$client$deleteQ, _yield$client$deleteQ2, response, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee17$(_context17) {
        while (1) switch (_context17.prev = _context17.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.DeleteQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.DeleteQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteQueue = stubSimpleCall(expectedResponse);
            _context17.next = 10;
            return client.deleteQueue(request);
          case 10:
            _yield$client$deleteQ = _context17.sent;
            _yield$client$deleteQ2 = _slicedToArray(_yield$client$deleteQ, 1);
            response = _yield$client$deleteQ2[0];
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.deleteQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.deleteQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 18:
          case "end":
            return _context17.stop();
        }
      }, _callee17);
    })));
    (0, _mocha.it)('invokes deleteQueue without error using callback', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee18() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, promise, response, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee18$(_context18) {
        while (1) switch (_context18.prev = _context18.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.DeleteQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.DeleteQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteQueue = stubSimpleCallWithCallback(expectedResponse);
            promise = new Promise(function (resolve, reject) {
              client.deleteQueue(request, function (err, result) {
                if (err) {
                  reject(err);
                } else {
                  resolve(result);
                }
              });
            });
            _context18.next = 11;
            return promise;
          case 11:
            response = _context18.sent;
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.deleteQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.deleteQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 17:
          case "end":
            return _context18.stop();
        }
      }, _callee18);
    })));
    (0, _mocha.it)('invokes deleteQueue with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee19() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee19$(_context19) {
        while (1) switch (_context19.prev = _context19.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.DeleteQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.DeleteQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.innerApiCalls.deleteQueue = stubSimpleCall(undefined, expectedError);
            _context19.next = 10;
            return _assert["default"].rejects(client.deleteQueue(request), expectedError);
          case 10:
            actualRequest = client.innerApiCalls.deleteQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.deleteQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 14:
          case "end":
            return _context19.stop();
        }
      }, _callee19);
    })));
    (0, _mocha.it)('invokes deleteQueue with closed client', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee20() {
      var client, request, defaultValue1, expectedError;
      return _regeneratorRuntime().wrap(function _callee20$(_context20) {
        while (1) switch (_context20.prev = _context20.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.DeleteQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.DeleteQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedError = new Error('The client has already been closed.');
            client.close();
            _context20.next = 9;
            return _assert["default"].rejects(client.deleteQueue(request), expectedError);
          case 9:
          case "end":
            return _context20.stop();
        }
      }, _callee20);
    })));
  });
  (0, _mocha.describe)('purgeQueue', function () {
    (0, _mocha.it)('invokes purgeQueue without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee21() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, _yield$client$purgeQu, _yield$client$purgeQu2, response, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee21$(_context21) {
        while (1) switch (_context21.prev = _context21.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.PurgeQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.PurgeQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.cloud.tasks.v2.Queue());
            client.innerApiCalls.purgeQueue = stubSimpleCall(expectedResponse);
            _context21.next = 10;
            return client.purgeQueue(request);
          case 10:
            _yield$client$purgeQu = _context21.sent;
            _yield$client$purgeQu2 = _slicedToArray(_yield$client$purgeQu, 1);
            response = _yield$client$purgeQu2[0];
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.purgeQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.purgeQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 18:
          case "end":
            return _context21.stop();
        }
      }, _callee21);
    })));
    (0, _mocha.it)('invokes purgeQueue without error using callback', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee22() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, promise, response, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee22$(_context22) {
        while (1) switch (_context22.prev = _context22.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.PurgeQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.PurgeQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.cloud.tasks.v2.Queue());
            client.innerApiCalls.purgeQueue = stubSimpleCallWithCallback(expectedResponse);
            promise = new Promise(function (resolve, reject) {
              client.purgeQueue(request, function (err, result) {
                if (err) {
                  reject(err);
                } else {
                  resolve(result);
                }
              });
            });
            _context22.next = 11;
            return promise;
          case 11:
            response = _context22.sent;
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.purgeQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.purgeQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 17:
          case "end":
            return _context22.stop();
        }
      }, _callee22);
    })));
    (0, _mocha.it)('invokes purgeQueue with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee23() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee23$(_context23) {
        while (1) switch (_context23.prev = _context23.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.PurgeQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.PurgeQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.innerApiCalls.purgeQueue = stubSimpleCall(undefined, expectedError);
            _context23.next = 10;
            return _assert["default"].rejects(client.purgeQueue(request), expectedError);
          case 10:
            actualRequest = client.innerApiCalls.purgeQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.purgeQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 14:
          case "end":
            return _context23.stop();
        }
      }, _callee23);
    })));
    (0, _mocha.it)('invokes purgeQueue with closed client', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee24() {
      var client, request, defaultValue1, expectedError;
      return _regeneratorRuntime().wrap(function _callee24$(_context24) {
        while (1) switch (_context24.prev = _context24.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.PurgeQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.PurgeQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedError = new Error('The client has already been closed.');
            client.close();
            _context24.next = 9;
            return _assert["default"].rejects(client.purgeQueue(request), expectedError);
          case 9:
          case "end":
            return _context24.stop();
        }
      }, _callee24);
    })));
  });
  (0, _mocha.describe)('pauseQueue', function () {
    (0, _mocha.it)('invokes pauseQueue without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee25() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, _yield$client$pauseQu, _yield$client$pauseQu2, response, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee25$(_context25) {
        while (1) switch (_context25.prev = _context25.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.PauseQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.PauseQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.cloud.tasks.v2.Queue());
            client.innerApiCalls.pauseQueue = stubSimpleCall(expectedResponse);
            _context25.next = 10;
            return client.pauseQueue(request);
          case 10:
            _yield$client$pauseQu = _context25.sent;
            _yield$client$pauseQu2 = _slicedToArray(_yield$client$pauseQu, 1);
            response = _yield$client$pauseQu2[0];
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.pauseQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.pauseQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 18:
          case "end":
            return _context25.stop();
        }
      }, _callee25);
    })));
    (0, _mocha.it)('invokes pauseQueue without error using callback', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee26() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, promise, response, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee26$(_context26) {
        while (1) switch (_context26.prev = _context26.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.PauseQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.PauseQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.cloud.tasks.v2.Queue());
            client.innerApiCalls.pauseQueue = stubSimpleCallWithCallback(expectedResponse);
            promise = new Promise(function (resolve, reject) {
              client.pauseQueue(request, function (err, result) {
                if (err) {
                  reject(err);
                } else {
                  resolve(result);
                }
              });
            });
            _context26.next = 11;
            return promise;
          case 11:
            response = _context26.sent;
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.pauseQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.pauseQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 17:
          case "end":
            return _context26.stop();
        }
      }, _callee26);
    })));
    (0, _mocha.it)('invokes pauseQueue with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee27() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee27$(_context27) {
        while (1) switch (_context27.prev = _context27.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.PauseQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.PauseQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.innerApiCalls.pauseQueue = stubSimpleCall(undefined, expectedError);
            _context27.next = 10;
            return _assert["default"].rejects(client.pauseQueue(request), expectedError);
          case 10:
            actualRequest = client.innerApiCalls.pauseQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.pauseQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 14:
          case "end":
            return _context27.stop();
        }
      }, _callee27);
    })));
    (0, _mocha.it)('invokes pauseQueue with closed client', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee28() {
      var client, request, defaultValue1, expectedError;
      return _regeneratorRuntime().wrap(function _callee28$(_context28) {
        while (1) switch (_context28.prev = _context28.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.PauseQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.PauseQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedError = new Error('The client has already been closed.');
            client.close();
            _context28.next = 9;
            return _assert["default"].rejects(client.pauseQueue(request), expectedError);
          case 9:
          case "end":
            return _context28.stop();
        }
      }, _callee28);
    })));
  });
  (0, _mocha.describe)('resumeQueue', function () {
    (0, _mocha.it)('invokes resumeQueue without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee29() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, _yield$client$resumeQ, _yield$client$resumeQ2, response, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee29$(_context29) {
        while (1) switch (_context29.prev = _context29.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.ResumeQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.ResumeQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.cloud.tasks.v2.Queue());
            client.innerApiCalls.resumeQueue = stubSimpleCall(expectedResponse);
            _context29.next = 10;
            return client.resumeQueue(request);
          case 10:
            _yield$client$resumeQ = _context29.sent;
            _yield$client$resumeQ2 = _slicedToArray(_yield$client$resumeQ, 1);
            response = _yield$client$resumeQ2[0];
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.resumeQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.resumeQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 18:
          case "end":
            return _context29.stop();
        }
      }, _callee29);
    })));
    (0, _mocha.it)('invokes resumeQueue without error using callback', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee30() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, promise, response, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee30$(_context30) {
        while (1) switch (_context30.prev = _context30.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.ResumeQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.ResumeQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.cloud.tasks.v2.Queue());
            client.innerApiCalls.resumeQueue = stubSimpleCallWithCallback(expectedResponse);
            promise = new Promise(function (resolve, reject) {
              client.resumeQueue(request, function (err, result) {
                if (err) {
                  reject(err);
                } else {
                  resolve(result);
                }
              });
            });
            _context30.next = 11;
            return promise;
          case 11:
            response = _context30.sent;
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.resumeQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.resumeQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 17:
          case "end":
            return _context30.stop();
        }
      }, _callee30);
    })));
    (0, _mocha.it)('invokes resumeQueue with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee31() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee31$(_context31) {
        while (1) switch (_context31.prev = _context31.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.ResumeQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.ResumeQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.innerApiCalls.resumeQueue = stubSimpleCall(undefined, expectedError);
            _context31.next = 10;
            return _assert["default"].rejects(client.resumeQueue(request), expectedError);
          case 10:
            actualRequest = client.innerApiCalls.resumeQueue.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.resumeQueue.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 14:
          case "end":
            return _context31.stop();
        }
      }, _callee31);
    })));
    (0, _mocha.it)('invokes resumeQueue with closed client', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee32() {
      var client, request, defaultValue1, expectedError;
      return _regeneratorRuntime().wrap(function _callee32$(_context32) {
        while (1) switch (_context32.prev = _context32.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.ResumeQueueRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.ResumeQueueRequest', ['name']);
            request.name = defaultValue1;
            expectedError = new Error('The client has already been closed.');
            client.close();
            _context32.next = 9;
            return _assert["default"].rejects(client.resumeQueue(request), expectedError);
          case 9:
          case "end":
            return _context32.stop();
        }
      }, _callee32);
    })));
  });
  (0, _mocha.describe)('getIamPolicy', function () {
    (0, _mocha.it)('invokes getIamPolicy without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee33() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, _yield$client$getIamP, _yield$client$getIamP2, response, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee33$(_context33) {
        while (1) switch (_context33.prev = _context33.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.iam.v1.GetIamPolicyRequest());
            defaultValue1 = getTypeDefaultValue('.google.iam.v1.GetIamPolicyRequest', ['resource']);
            request.resource = defaultValue1;
            expectedHeaderRequestParams = "resource=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.iam.v1.Policy());
            client.innerApiCalls.getIamPolicy = stubSimpleCall(expectedResponse);
            _context33.next = 10;
            return client.getIamPolicy(request);
          case 10:
            _yield$client$getIamP = _context33.sent;
            _yield$client$getIamP2 = _slicedToArray(_yield$client$getIamP, 1);
            response = _yield$client$getIamP2[0];
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.getIamPolicy.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.getIamPolicy.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 18:
          case "end":
            return _context33.stop();
        }
      }, _callee33);
    })));
    (0, _mocha.it)('invokes getIamPolicy without error using callback', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee34() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, promise, response, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee34$(_context34) {
        while (1) switch (_context34.prev = _context34.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.iam.v1.GetIamPolicyRequest());
            defaultValue1 = getTypeDefaultValue('.google.iam.v1.GetIamPolicyRequest', ['resource']);
            request.resource = defaultValue1;
            expectedHeaderRequestParams = "resource=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.iam.v1.Policy());
            client.innerApiCalls.getIamPolicy = stubSimpleCallWithCallback(expectedResponse);
            promise = new Promise(function (resolve, reject) {
              client.getIamPolicy(request, function (err, result) {
                if (err) {
                  reject(err);
                } else {
                  resolve(result);
                }
              });
            });
            _context34.next = 11;
            return promise;
          case 11:
            response = _context34.sent;
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.getIamPolicy.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.getIamPolicy.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 17:
          case "end":
            return _context34.stop();
        }
      }, _callee34);
    })));
    (0, _mocha.it)('invokes getIamPolicy with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee35() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee35$(_context35) {
        while (1) switch (_context35.prev = _context35.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.iam.v1.GetIamPolicyRequest());
            defaultValue1 = getTypeDefaultValue('.google.iam.v1.GetIamPolicyRequest', ['resource']);
            request.resource = defaultValue1;
            expectedHeaderRequestParams = "resource=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.innerApiCalls.getIamPolicy = stubSimpleCall(undefined, expectedError);
            _context35.next = 10;
            return _assert["default"].rejects(client.getIamPolicy(request), expectedError);
          case 10:
            actualRequest = client.innerApiCalls.getIamPolicy.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.getIamPolicy.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 14:
          case "end":
            return _context35.stop();
        }
      }, _callee35);
    })));
    (0, _mocha.it)('invokes getIamPolicy with closed client', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee36() {
      var client, request, defaultValue1, expectedError;
      return _regeneratorRuntime().wrap(function _callee36$(_context36) {
        while (1) switch (_context36.prev = _context36.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.iam.v1.GetIamPolicyRequest());
            defaultValue1 = getTypeDefaultValue('.google.iam.v1.GetIamPolicyRequest', ['resource']);
            request.resource = defaultValue1;
            expectedError = new Error('The client has already been closed.');
            client.close();
            _context36.next = 9;
            return _assert["default"].rejects(client.getIamPolicy(request), expectedError);
          case 9:
          case "end":
            return _context36.stop();
        }
      }, _callee36);
    })));
  });
  (0, _mocha.describe)('setIamPolicy', function () {
    (0, _mocha.it)('invokes setIamPolicy without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee37() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, _yield$client$setIamP, _yield$client$setIamP2, response, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee37$(_context37) {
        while (1) switch (_context37.prev = _context37.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.iam.v1.SetIamPolicyRequest());
            defaultValue1 = getTypeDefaultValue('.google.iam.v1.SetIamPolicyRequest', ['resource']);
            request.resource = defaultValue1;
            expectedHeaderRequestParams = "resource=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.iam.v1.Policy());
            client.innerApiCalls.setIamPolicy = stubSimpleCall(expectedResponse);
            _context37.next = 10;
            return client.setIamPolicy(request);
          case 10:
            _yield$client$setIamP = _context37.sent;
            _yield$client$setIamP2 = _slicedToArray(_yield$client$setIamP, 1);
            response = _yield$client$setIamP2[0];
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.setIamPolicy.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.setIamPolicy.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 18:
          case "end":
            return _context37.stop();
        }
      }, _callee37);
    })));
    (0, _mocha.it)('invokes setIamPolicy without error using callback', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee38() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, promise, response, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee38$(_context38) {
        while (1) switch (_context38.prev = _context38.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.iam.v1.SetIamPolicyRequest());
            defaultValue1 = getTypeDefaultValue('.google.iam.v1.SetIamPolicyRequest', ['resource']);
            request.resource = defaultValue1;
            expectedHeaderRequestParams = "resource=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.iam.v1.Policy());
            client.innerApiCalls.setIamPolicy = stubSimpleCallWithCallback(expectedResponse);
            promise = new Promise(function (resolve, reject) {
              client.setIamPolicy(request, function (err, result) {
                if (err) {
                  reject(err);
                } else {
                  resolve(result);
                }
              });
            });
            _context38.next = 11;
            return promise;
          case 11:
            response = _context38.sent;
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.setIamPolicy.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.setIamPolicy.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 17:
          case "end":
            return _context38.stop();
        }
      }, _callee38);
    })));
    (0, _mocha.it)('invokes setIamPolicy with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee39() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee39$(_context39) {
        while (1) switch (_context39.prev = _context39.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.iam.v1.SetIamPolicyRequest());
            defaultValue1 = getTypeDefaultValue('.google.iam.v1.SetIamPolicyRequest', ['resource']);
            request.resource = defaultValue1;
            expectedHeaderRequestParams = "resource=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.innerApiCalls.setIamPolicy = stubSimpleCall(undefined, expectedError);
            _context39.next = 10;
            return _assert["default"].rejects(client.setIamPolicy(request), expectedError);
          case 10:
            actualRequest = client.innerApiCalls.setIamPolicy.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.setIamPolicy.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 14:
          case "end":
            return _context39.stop();
        }
      }, _callee39);
    })));
    (0, _mocha.it)('invokes setIamPolicy with closed client', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee40() {
      var client, request, defaultValue1, expectedError;
      return _regeneratorRuntime().wrap(function _callee40$(_context40) {
        while (1) switch (_context40.prev = _context40.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.iam.v1.SetIamPolicyRequest());
            defaultValue1 = getTypeDefaultValue('.google.iam.v1.SetIamPolicyRequest', ['resource']);
            request.resource = defaultValue1;
            expectedError = new Error('The client has already been closed.');
            client.close();
            _context40.next = 9;
            return _assert["default"].rejects(client.setIamPolicy(request), expectedError);
          case 9:
          case "end":
            return _context40.stop();
        }
      }, _callee40);
    })));
  });
  (0, _mocha.describe)('testIamPermissions', function () {
    (0, _mocha.it)('invokes testIamPermissions without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee41() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, _yield$client$testIam, _yield$client$testIam2, response, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee41$(_context41) {
        while (1) switch (_context41.prev = _context41.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.iam.v1.TestIamPermissionsRequest());
            defaultValue1 = getTypeDefaultValue('.google.iam.v1.TestIamPermissionsRequest', ['resource']);
            request.resource = defaultValue1;
            expectedHeaderRequestParams = "resource=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.iam.v1.TestIamPermissionsResponse());
            client.innerApiCalls.testIamPermissions = stubSimpleCall(expectedResponse);
            _context41.next = 10;
            return client.testIamPermissions(request);
          case 10:
            _yield$client$testIam = _context41.sent;
            _yield$client$testIam2 = _slicedToArray(_yield$client$testIam, 1);
            response = _yield$client$testIam2[0];
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.testIamPermissions.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.testIamPermissions.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 18:
          case "end":
            return _context41.stop();
        }
      }, _callee41);
    })));
    (0, _mocha.it)('invokes testIamPermissions without error using callback', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee42() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, promise, response, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee42$(_context42) {
        while (1) switch (_context42.prev = _context42.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.iam.v1.TestIamPermissionsRequest());
            defaultValue1 = getTypeDefaultValue('.google.iam.v1.TestIamPermissionsRequest', ['resource']);
            request.resource = defaultValue1;
            expectedHeaderRequestParams = "resource=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.iam.v1.TestIamPermissionsResponse());
            client.innerApiCalls.testIamPermissions = stubSimpleCallWithCallback(expectedResponse);
            promise = new Promise(function (resolve, reject) {
              client.testIamPermissions(request, function (err, result) {
                if (err) {
                  reject(err);
                } else {
                  resolve(result);
                }
              });
            });
            _context42.next = 11;
            return promise;
          case 11:
            response = _context42.sent;
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.testIamPermissions.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.testIamPermissions.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 17:
          case "end":
            return _context42.stop();
        }
      }, _callee42);
    })));
    (0, _mocha.it)('invokes testIamPermissions with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee43() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee43$(_context43) {
        while (1) switch (_context43.prev = _context43.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.iam.v1.TestIamPermissionsRequest());
            defaultValue1 = getTypeDefaultValue('.google.iam.v1.TestIamPermissionsRequest', ['resource']);
            request.resource = defaultValue1;
            expectedHeaderRequestParams = "resource=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.innerApiCalls.testIamPermissions = stubSimpleCall(undefined, expectedError);
            _context43.next = 10;
            return _assert["default"].rejects(client.testIamPermissions(request), expectedError);
          case 10:
            actualRequest = client.innerApiCalls.testIamPermissions.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.testIamPermissions.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 14:
          case "end":
            return _context43.stop();
        }
      }, _callee43);
    })));
    (0, _mocha.it)('invokes testIamPermissions with closed client', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee44() {
      var client, request, defaultValue1, expectedError;
      return _regeneratorRuntime().wrap(function _callee44$(_context44) {
        while (1) switch (_context44.prev = _context44.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.iam.v1.TestIamPermissionsRequest());
            defaultValue1 = getTypeDefaultValue('.google.iam.v1.TestIamPermissionsRequest', ['resource']);
            request.resource = defaultValue1;
            expectedError = new Error('The client has already been closed.');
            client.close();
            _context44.next = 9;
            return _assert["default"].rejects(client.testIamPermissions(request), expectedError);
          case 9:
          case "end":
            return _context44.stop();
        }
      }, _callee44);
    })));
  });
  (0, _mocha.describe)('getTask', function () {
    (0, _mocha.it)('invokes getTask without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee45() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, _yield$client$getTask, _yield$client$getTask2, response, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee45$(_context45) {
        while (1) switch (_context45.prev = _context45.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.GetTaskRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.GetTaskRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.cloud.tasks.v2.Task());
            client.innerApiCalls.getTask = stubSimpleCall(expectedResponse);
            _context45.next = 10;
            return client.getTask(request);
          case 10:
            _yield$client$getTask = _context45.sent;
            _yield$client$getTask2 = _slicedToArray(_yield$client$getTask, 1);
            response = _yield$client$getTask2[0];
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.getTask.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.getTask.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 18:
          case "end":
            return _context45.stop();
        }
      }, _callee45);
    })));
    (0, _mocha.it)('invokes getTask without error using callback', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee46() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, promise, response, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee46$(_context46) {
        while (1) switch (_context46.prev = _context46.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.GetTaskRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.GetTaskRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.cloud.tasks.v2.Task());
            client.innerApiCalls.getTask = stubSimpleCallWithCallback(expectedResponse);
            promise = new Promise(function (resolve, reject) {
              client.getTask(request, function (err, result) {
                if (err) {
                  reject(err);
                } else {
                  resolve(result);
                }
              });
            });
            _context46.next = 11;
            return promise;
          case 11:
            response = _context46.sent;
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.getTask.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.getTask.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 17:
          case "end":
            return _context46.stop();
        }
      }, _callee46);
    })));
    (0, _mocha.it)('invokes getTask with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee47() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee47$(_context47) {
        while (1) switch (_context47.prev = _context47.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.GetTaskRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.GetTaskRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.innerApiCalls.getTask = stubSimpleCall(undefined, expectedError);
            _context47.next = 10;
            return _assert["default"].rejects(client.getTask(request), expectedError);
          case 10:
            actualRequest = client.innerApiCalls.getTask.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.getTask.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 14:
          case "end":
            return _context47.stop();
        }
      }, _callee47);
    })));
    (0, _mocha.it)('invokes getTask with closed client', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee48() {
      var client, request, defaultValue1, expectedError;
      return _regeneratorRuntime().wrap(function _callee48$(_context48) {
        while (1) switch (_context48.prev = _context48.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.GetTaskRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.GetTaskRequest', ['name']);
            request.name = defaultValue1;
            expectedError = new Error('The client has already been closed.');
            client.close();
            _context48.next = 9;
            return _assert["default"].rejects(client.getTask(request), expectedError);
          case 9:
          case "end":
            return _context48.stop();
        }
      }, _callee48);
    })));
  });
  (0, _mocha.describe)('createTask', function () {
    (0, _mocha.it)('invokes createTask without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee49() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, _yield$client$createT, _yield$client$createT2, response, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee49$(_context49) {
        while (1) switch (_context49.prev = _context49.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.CreateTaskRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.CreateTaskRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.cloud.tasks.v2.Task());
            client.innerApiCalls.createTask = stubSimpleCall(expectedResponse);
            _context49.next = 10;
            return client.createTask(request);
          case 10:
            _yield$client$createT = _context49.sent;
            _yield$client$createT2 = _slicedToArray(_yield$client$createT, 1);
            response = _yield$client$createT2[0];
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.createTask.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.createTask.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 18:
          case "end":
            return _context49.stop();
        }
      }, _callee49);
    })));
    (0, _mocha.it)('invokes createTask without error using callback', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee50() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, promise, response, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee50$(_context50) {
        while (1) switch (_context50.prev = _context50.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.CreateTaskRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.CreateTaskRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.cloud.tasks.v2.Task());
            client.innerApiCalls.createTask = stubSimpleCallWithCallback(expectedResponse);
            promise = new Promise(function (resolve, reject) {
              client.createTask(request, function (err, result) {
                if (err) {
                  reject(err);
                } else {
                  resolve(result);
                }
              });
            });
            _context50.next = 11;
            return promise;
          case 11:
            response = _context50.sent;
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.createTask.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.createTask.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 17:
          case "end":
            return _context50.stop();
        }
      }, _callee50);
    })));
    (0, _mocha.it)('invokes createTask with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee51() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee51$(_context51) {
        while (1) switch (_context51.prev = _context51.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.CreateTaskRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.CreateTaskRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.innerApiCalls.createTask = stubSimpleCall(undefined, expectedError);
            _context51.next = 10;
            return _assert["default"].rejects(client.createTask(request), expectedError);
          case 10:
            actualRequest = client.innerApiCalls.createTask.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.createTask.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 14:
          case "end":
            return _context51.stop();
        }
      }, _callee51);
    })));
    (0, _mocha.it)('invokes createTask with closed client', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee52() {
      var client, request, defaultValue1, expectedError;
      return _regeneratorRuntime().wrap(function _callee52$(_context52) {
        while (1) switch (_context52.prev = _context52.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.CreateTaskRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.CreateTaskRequest', ['parent']);
            request.parent = defaultValue1;
            expectedError = new Error('The client has already been closed.');
            client.close();
            _context52.next = 9;
            return _assert["default"].rejects(client.createTask(request), expectedError);
          case 9:
          case "end":
            return _context52.stop();
        }
      }, _callee52);
    })));
  });
  (0, _mocha.describe)('deleteTask', function () {
    (0, _mocha.it)('invokes deleteTask without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee53() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, _yield$client$deleteT, _yield$client$deleteT2, response, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee53$(_context53) {
        while (1) switch (_context53.prev = _context53.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.DeleteTaskRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.DeleteTaskRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteTask = stubSimpleCall(expectedResponse);
            _context53.next = 10;
            return client.deleteTask(request);
          case 10:
            _yield$client$deleteT = _context53.sent;
            _yield$client$deleteT2 = _slicedToArray(_yield$client$deleteT, 1);
            response = _yield$client$deleteT2[0];
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.deleteTask.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.deleteTask.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 18:
          case "end":
            return _context53.stop();
        }
      }, _callee53);
    })));
    (0, _mocha.it)('invokes deleteTask without error using callback', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee54() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, promise, response, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee54$(_context54) {
        while (1) switch (_context54.prev = _context54.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.DeleteTaskRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.DeleteTaskRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteTask = stubSimpleCallWithCallback(expectedResponse);
            promise = new Promise(function (resolve, reject) {
              client.deleteTask(request, function (err, result) {
                if (err) {
                  reject(err);
                } else {
                  resolve(result);
                }
              });
            });
            _context54.next = 11;
            return promise;
          case 11:
            response = _context54.sent;
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.deleteTask.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.deleteTask.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 17:
          case "end":
            return _context54.stop();
        }
      }, _callee54);
    })));
    (0, _mocha.it)('invokes deleteTask with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee55() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee55$(_context55) {
        while (1) switch (_context55.prev = _context55.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.DeleteTaskRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.DeleteTaskRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.innerApiCalls.deleteTask = stubSimpleCall(undefined, expectedError);
            _context55.next = 10;
            return _assert["default"].rejects(client.deleteTask(request), expectedError);
          case 10:
            actualRequest = client.innerApiCalls.deleteTask.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.deleteTask.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 14:
          case "end":
            return _context55.stop();
        }
      }, _callee55);
    })));
    (0, _mocha.it)('invokes deleteTask with closed client', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee56() {
      var client, request, defaultValue1, expectedError;
      return _regeneratorRuntime().wrap(function _callee56$(_context56) {
        while (1) switch (_context56.prev = _context56.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.DeleteTaskRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.DeleteTaskRequest', ['name']);
            request.name = defaultValue1;
            expectedError = new Error('The client has already been closed.');
            client.close();
            _context56.next = 9;
            return _assert["default"].rejects(client.deleteTask(request), expectedError);
          case 9:
          case "end":
            return _context56.stop();
        }
      }, _callee56);
    })));
  });
  (0, _mocha.describe)('runTask', function () {
    (0, _mocha.it)('invokes runTask without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee57() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, _yield$client$runTask, _yield$client$runTask2, response, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee57$(_context57) {
        while (1) switch (_context57.prev = _context57.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.RunTaskRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.RunTaskRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.cloud.tasks.v2.Task());
            client.innerApiCalls.runTask = stubSimpleCall(expectedResponse);
            _context57.next = 10;
            return client.runTask(request);
          case 10:
            _yield$client$runTask = _context57.sent;
            _yield$client$runTask2 = _slicedToArray(_yield$client$runTask, 1);
            response = _yield$client$runTask2[0];
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.runTask.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.runTask.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 18:
          case "end":
            return _context57.stop();
        }
      }, _callee57);
    })));
    (0, _mocha.it)('invokes runTask without error using callback', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee58() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, promise, response, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee58$(_context58) {
        while (1) switch (_context58.prev = _context58.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.RunTaskRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.RunTaskRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = generateSampleMessage(new protos.google.cloud.tasks.v2.Task());
            client.innerApiCalls.runTask = stubSimpleCallWithCallback(expectedResponse);
            promise = new Promise(function (resolve, reject) {
              client.runTask(request, function (err, result) {
                if (err) {
                  reject(err);
                } else {
                  resolve(result);
                }
              });
            });
            _context58.next = 11;
            return promise;
          case 11:
            response = _context58.sent;
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.runTask.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.runTask.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 17:
          case "end":
            return _context58.stop();
        }
      }, _callee58);
    })));
    (0, _mocha.it)('invokes runTask with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee59() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee59$(_context59) {
        while (1) switch (_context59.prev = _context59.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.RunTaskRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.RunTaskRequest', ['name']);
            request.name = defaultValue1;
            expectedHeaderRequestParams = "name=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.innerApiCalls.runTask = stubSimpleCall(undefined, expectedError);
            _context59.next = 10;
            return _assert["default"].rejects(client.runTask(request), expectedError);
          case 10:
            actualRequest = client.innerApiCalls.runTask.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.runTask.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 14:
          case "end":
            return _context59.stop();
        }
      }, _callee59);
    })));
    (0, _mocha.it)('invokes runTask with closed client', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee60() {
      var client, request, defaultValue1, expectedError;
      return _regeneratorRuntime().wrap(function _callee60$(_context60) {
        while (1) switch (_context60.prev = _context60.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.RunTaskRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.RunTaskRequest', ['name']);
            request.name = defaultValue1;
            expectedError = new Error('The client has already been closed.');
            client.close();
            _context60.next = 9;
            return _assert["default"].rejects(client.runTask(request), expectedError);
          case 9:
          case "end":
            return _context60.stop();
        }
      }, _callee60);
    })));
  });
  (0, _mocha.describe)('listQueues', function () {
    (0, _mocha.it)('invokes listQueues without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee61() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, _yield$client$listQue, _yield$client$listQue2, response, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee61$(_context61) {
        while (1) switch (_context61.prev = _context61.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.ListQueuesRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.ListQueuesRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = [generateSampleMessage(new protos.google.cloud.tasks.v2.Queue()), generateSampleMessage(new protos.google.cloud.tasks.v2.Queue()), generateSampleMessage(new protos.google.cloud.tasks.v2.Queue())];
            client.innerApiCalls.listQueues = stubSimpleCall(expectedResponse);
            _context61.next = 10;
            return client.listQueues(request);
          case 10:
            _yield$client$listQue = _context61.sent;
            _yield$client$listQue2 = _slicedToArray(_yield$client$listQue, 1);
            response = _yield$client$listQue2[0];
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.listQueues.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.listQueues.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 18:
          case "end":
            return _context61.stop();
        }
      }, _callee61);
    })));
    (0, _mocha.it)('invokes listQueues without error using callback', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee62() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, promise, response, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee62$(_context62) {
        while (1) switch (_context62.prev = _context62.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.ListQueuesRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.ListQueuesRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = [generateSampleMessage(new protos.google.cloud.tasks.v2.Queue()), generateSampleMessage(new protos.google.cloud.tasks.v2.Queue()), generateSampleMessage(new protos.google.cloud.tasks.v2.Queue())];
            client.innerApiCalls.listQueues = stubSimpleCallWithCallback(expectedResponse);
            promise = new Promise(function (resolve, reject) {
              client.listQueues(request, function (err, result) {
                if (err) {
                  reject(err);
                } else {
                  resolve(result);
                }
              });
            });
            _context62.next = 11;
            return promise;
          case 11:
            response = _context62.sent;
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.listQueues.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.listQueues.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 17:
          case "end":
            return _context62.stop();
        }
      }, _callee62);
    })));
    (0, _mocha.it)('invokes listQueues with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee63() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee63$(_context63) {
        while (1) switch (_context63.prev = _context63.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.ListQueuesRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.ListQueuesRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.innerApiCalls.listQueues = stubSimpleCall(undefined, expectedError);
            _context63.next = 10;
            return _assert["default"].rejects(client.listQueues(request), expectedError);
          case 10:
            actualRequest = client.innerApiCalls.listQueues.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.listQueues.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 14:
          case "end":
            return _context63.stop();
        }
      }, _callee63);
    })));
    (0, _mocha.it)('invokes listQueuesStream without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee64() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, stream, promise, responses;
      return _regeneratorRuntime().wrap(function _callee64$(_context64) {
        while (1) switch (_context64.prev = _context64.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.ListQueuesRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.ListQueuesRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = [generateSampleMessage(new protos.google.cloud.tasks.v2.Queue()), generateSampleMessage(new protos.google.cloud.tasks.v2.Queue()), generateSampleMessage(new protos.google.cloud.tasks.v2.Queue())];
            client.descriptors.page.listQueues.createStream = stubPageStreamingCall(expectedResponse);
            stream = client.listQueuesStream(request);
            promise = new Promise(function (resolve, reject) {
              var responses = [];
              stream.on('data', function (response) {
                responses.push(response);
              });
              stream.on('end', function () {
                resolve(responses);
              });
              stream.on('error', function (err) {
                reject(err);
              });
            });
            _context64.next = 12;
            return promise;
          case 12:
            responses = _context64.sent;
            _assert["default"].deepStrictEqual(responses, expectedResponse);
            (0, _assert["default"])(client.descriptors.page.listQueues.createStream.getCall(0).calledWith(client.innerApiCalls.listQueues, request));
            (0, _assert["default"])(client.descriptors.page.listQueues.createStream.getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
          case 16:
          case "end":
            return _context64.stop();
        }
      }, _callee64);
    })));
    (0, _mocha.it)('invokes listQueuesStream with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee65() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, stream, promise;
      return _regeneratorRuntime().wrap(function _callee65$(_context65) {
        while (1) switch (_context65.prev = _context65.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.ListQueuesRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.ListQueuesRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.descriptors.page.listQueues.createStream = stubPageStreamingCall(undefined, expectedError);
            stream = client.listQueuesStream(request);
            promise = new Promise(function (resolve, reject) {
              var responses = [];
              stream.on('data', function (response) {
                responses.push(response);
              });
              stream.on('end', function () {
                resolve(responses);
              });
              stream.on('error', function (err) {
                reject(err);
              });
            });
            _context65.next = 12;
            return _assert["default"].rejects(promise, expectedError);
          case 12:
            (0, _assert["default"])(client.descriptors.page.listQueues.createStream.getCall(0).calledWith(client.innerApiCalls.listQueues, request));
            (0, _assert["default"])(client.descriptors.page.listQueues.createStream.getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
          case 14:
          case "end":
            return _context65.stop();
        }
      }, _callee65);
    })));
    (0, _mocha.it)('uses async iteration with listQueues without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee66() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, responses, iterable, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, resource;
      return _regeneratorRuntime().wrap(function _callee66$(_context66) {
        while (1) switch (_context66.prev = _context66.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.ListQueuesRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.ListQueuesRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = [generateSampleMessage(new protos.google.cloud.tasks.v2.Queue()), generateSampleMessage(new protos.google.cloud.tasks.v2.Queue()), generateSampleMessage(new protos.google.cloud.tasks.v2.Queue())];
            client.descriptors.page.listQueues.asyncIterate = stubAsyncIterationCall(expectedResponse);
            responses = [];
            iterable = client.listQueuesAsync(request);
            _iteratorAbruptCompletion = false;
            _didIteratorError = false;
            _context66.prev = 12;
            _iterator = _asyncIterator(iterable);
          case 14:
            _context66.next = 16;
            return _iterator.next();
          case 16:
            if (!(_iteratorAbruptCompletion = !(_step = _context66.sent).done)) {
              _context66.next = 22;
              break;
            }
            resource = _step.value;
            responses.push(resource);
          case 19:
            _iteratorAbruptCompletion = false;
            _context66.next = 14;
            break;
          case 22:
            _context66.next = 28;
            break;
          case 24:
            _context66.prev = 24;
            _context66.t0 = _context66["catch"](12);
            _didIteratorError = true;
            _iteratorError = _context66.t0;
          case 28:
            _context66.prev = 28;
            _context66.prev = 29;
            if (!(_iteratorAbruptCompletion && _iterator["return"] != null)) {
              _context66.next = 33;
              break;
            }
            _context66.next = 33;
            return _iterator["return"]();
          case 33:
            _context66.prev = 33;
            if (!_didIteratorError) {
              _context66.next = 36;
              break;
            }
            throw _iteratorError;
          case 36:
            return _context66.finish(33);
          case 37:
            return _context66.finish(28);
          case 38:
            _assert["default"].deepStrictEqual(responses, expectedResponse);
            _assert["default"].deepStrictEqual(client.descriptors.page.listQueues.asyncIterate.getCall(0).args[1], request);
            (0, _assert["default"])(client.descriptors.page.listQueues.asyncIterate.getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
          case 41:
          case "end":
            return _context66.stop();
        }
      }, _callee66, null, [[12, 24, 28, 38], [29,, 33, 37]]);
    })));
    (0, _mocha.it)('uses async iteration with listQueues with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee68() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, iterable;
      return _regeneratorRuntime().wrap(function _callee68$(_context68) {
        while (1) switch (_context68.prev = _context68.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.ListQueuesRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.ListQueuesRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.descriptors.page.listQueues.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            iterable = client.listQueuesAsync(request);
            _context68.next = 11;
            return _assert["default"].rejects(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee67() {
              var responses, _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, resource;
              return _regeneratorRuntime().wrap(function _callee67$(_context67) {
                while (1) switch (_context67.prev = _context67.next) {
                  case 0:
                    responses = [];
                    _iteratorAbruptCompletion2 = false;
                    _didIteratorError2 = false;
                    _context67.prev = 3;
                    _iterator2 = _asyncIterator(iterable);
                  case 5:
                    _context67.next = 7;
                    return _iterator2.next();
                  case 7:
                    if (!(_iteratorAbruptCompletion2 = !(_step2 = _context67.sent).done)) {
                      _context67.next = 13;
                      break;
                    }
                    resource = _step2.value;
                    responses.push(resource);
                  case 10:
                    _iteratorAbruptCompletion2 = false;
                    _context67.next = 5;
                    break;
                  case 13:
                    _context67.next = 19;
                    break;
                  case 15:
                    _context67.prev = 15;
                    _context67.t0 = _context67["catch"](3);
                    _didIteratorError2 = true;
                    _iteratorError2 = _context67.t0;
                  case 19:
                    _context67.prev = 19;
                    _context67.prev = 20;
                    if (!(_iteratorAbruptCompletion2 && _iterator2["return"] != null)) {
                      _context67.next = 24;
                      break;
                    }
                    _context67.next = 24;
                    return _iterator2["return"]();
                  case 24:
                    _context67.prev = 24;
                    if (!_didIteratorError2) {
                      _context67.next = 27;
                      break;
                    }
                    throw _iteratorError2;
                  case 27:
                    return _context67.finish(24);
                  case 28:
                    return _context67.finish(19);
                  case 29:
                  case "end":
                    return _context67.stop();
                }
              }, _callee67, null, [[3, 15, 19, 29], [20,, 24, 28]]);
            })));
          case 11:
            _assert["default"].deepStrictEqual(client.descriptors.page.listQueues.asyncIterate.getCall(0).args[1], request);
            (0, _assert["default"])(client.descriptors.page.listQueues.asyncIterate.getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
          case 13:
          case "end":
            return _context68.stop();
        }
      }, _callee68);
    })));
  });
  (0, _mocha.describe)('listTasks', function () {
    (0, _mocha.it)('invokes listTasks without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee69() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, _yield$client$listTas, _yield$client$listTas2, response, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee69$(_context69) {
        while (1) switch (_context69.prev = _context69.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.ListTasksRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.ListTasksRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = [generateSampleMessage(new protos.google.cloud.tasks.v2.Task()), generateSampleMessage(new protos.google.cloud.tasks.v2.Task()), generateSampleMessage(new protos.google.cloud.tasks.v2.Task())];
            client.innerApiCalls.listTasks = stubSimpleCall(expectedResponse);
            _context69.next = 10;
            return client.listTasks(request);
          case 10:
            _yield$client$listTas = _context69.sent;
            _yield$client$listTas2 = _slicedToArray(_yield$client$listTas, 1);
            response = _yield$client$listTas2[0];
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.listTasks.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.listTasks.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 18:
          case "end":
            return _context69.stop();
        }
      }, _callee69);
    })));
    (0, _mocha.it)('invokes listTasks without error using callback', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee70() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, promise, response, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee70$(_context70) {
        while (1) switch (_context70.prev = _context70.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.ListTasksRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.ListTasksRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = [generateSampleMessage(new protos.google.cloud.tasks.v2.Task()), generateSampleMessage(new protos.google.cloud.tasks.v2.Task()), generateSampleMessage(new protos.google.cloud.tasks.v2.Task())];
            client.innerApiCalls.listTasks = stubSimpleCallWithCallback(expectedResponse);
            promise = new Promise(function (resolve, reject) {
              client.listTasks(request, function (err, result) {
                if (err) {
                  reject(err);
                } else {
                  resolve(result);
                }
              });
            });
            _context70.next = 11;
            return promise;
          case 11:
            response = _context70.sent;
            _assert["default"].deepStrictEqual(response, expectedResponse);
            actualRequest = client.innerApiCalls.listTasks.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.listTasks.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 17:
          case "end":
            return _context70.stop();
        }
      }, _callee70);
    })));
    (0, _mocha.it)('invokes listTasks with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee71() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, actualRequest, actualHeaderRequestParams;
      return _regeneratorRuntime().wrap(function _callee71$(_context71) {
        while (1) switch (_context71.prev = _context71.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.ListTasksRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.ListTasksRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.innerApiCalls.listTasks = stubSimpleCall(undefined, expectedError);
            _context71.next = 10;
            return _assert["default"].rejects(client.listTasks(request), expectedError);
          case 10:
            actualRequest = client.innerApiCalls.listTasks.getCall(0).args[0];
            _assert["default"].deepStrictEqual(actualRequest, request);
            actualHeaderRequestParams = client.innerApiCalls.listTasks.getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            (0, _assert["default"])(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
          case 14:
          case "end":
            return _context71.stop();
        }
      }, _callee71);
    })));
    (0, _mocha.it)('invokes listTasksStream without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee72() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, stream, promise, responses;
      return _regeneratorRuntime().wrap(function _callee72$(_context72) {
        while (1) switch (_context72.prev = _context72.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.ListTasksRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.ListTasksRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = [generateSampleMessage(new protos.google.cloud.tasks.v2.Task()), generateSampleMessage(new protos.google.cloud.tasks.v2.Task()), generateSampleMessage(new protos.google.cloud.tasks.v2.Task())];
            client.descriptors.page.listTasks.createStream = stubPageStreamingCall(expectedResponse);
            stream = client.listTasksStream(request);
            promise = new Promise(function (resolve, reject) {
              var responses = [];
              stream.on('data', function (response) {
                responses.push(response);
              });
              stream.on('end', function () {
                resolve(responses);
              });
              stream.on('error', function (err) {
                reject(err);
              });
            });
            _context72.next = 12;
            return promise;
          case 12:
            responses = _context72.sent;
            _assert["default"].deepStrictEqual(responses, expectedResponse);
            (0, _assert["default"])(client.descriptors.page.listTasks.createStream.getCall(0).calledWith(client.innerApiCalls.listTasks, request));
            (0, _assert["default"])(client.descriptors.page.listTasks.createStream.getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
          case 16:
          case "end":
            return _context72.stop();
        }
      }, _callee72);
    })));
    (0, _mocha.it)('invokes listTasksStream with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee73() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, stream, promise;
      return _regeneratorRuntime().wrap(function _callee73$(_context73) {
        while (1) switch (_context73.prev = _context73.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.ListTasksRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.ListTasksRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.descriptors.page.listTasks.createStream = stubPageStreamingCall(undefined, expectedError);
            stream = client.listTasksStream(request);
            promise = new Promise(function (resolve, reject) {
              var responses = [];
              stream.on('data', function (response) {
                responses.push(response);
              });
              stream.on('end', function () {
                resolve(responses);
              });
              stream.on('error', function (err) {
                reject(err);
              });
            });
            _context73.next = 12;
            return _assert["default"].rejects(promise, expectedError);
          case 12:
            (0, _assert["default"])(client.descriptors.page.listTasks.createStream.getCall(0).calledWith(client.innerApiCalls.listTasks, request));
            (0, _assert["default"])(client.descriptors.page.listTasks.createStream.getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
          case 14:
          case "end":
            return _context73.stop();
        }
      }, _callee73);
    })));
    (0, _mocha.it)('uses async iteration with listTasks without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee74() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedResponse, responses, iterable, _iteratorAbruptCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, resource;
      return _regeneratorRuntime().wrap(function _callee74$(_context74) {
        while (1) switch (_context74.prev = _context74.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.ListTasksRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.ListTasksRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedResponse = [generateSampleMessage(new protos.google.cloud.tasks.v2.Task()), generateSampleMessage(new protos.google.cloud.tasks.v2.Task()), generateSampleMessage(new protos.google.cloud.tasks.v2.Task())];
            client.descriptors.page.listTasks.asyncIterate = stubAsyncIterationCall(expectedResponse);
            responses = [];
            iterable = client.listTasksAsync(request);
            _iteratorAbruptCompletion3 = false;
            _didIteratorError3 = false;
            _context74.prev = 12;
            _iterator3 = _asyncIterator(iterable);
          case 14:
            _context74.next = 16;
            return _iterator3.next();
          case 16:
            if (!(_iteratorAbruptCompletion3 = !(_step3 = _context74.sent).done)) {
              _context74.next = 22;
              break;
            }
            resource = _step3.value;
            responses.push(resource);
          case 19:
            _iteratorAbruptCompletion3 = false;
            _context74.next = 14;
            break;
          case 22:
            _context74.next = 28;
            break;
          case 24:
            _context74.prev = 24;
            _context74.t0 = _context74["catch"](12);
            _didIteratorError3 = true;
            _iteratorError3 = _context74.t0;
          case 28:
            _context74.prev = 28;
            _context74.prev = 29;
            if (!(_iteratorAbruptCompletion3 && _iterator3["return"] != null)) {
              _context74.next = 33;
              break;
            }
            _context74.next = 33;
            return _iterator3["return"]();
          case 33:
            _context74.prev = 33;
            if (!_didIteratorError3) {
              _context74.next = 36;
              break;
            }
            throw _iteratorError3;
          case 36:
            return _context74.finish(33);
          case 37:
            return _context74.finish(28);
          case 38:
            _assert["default"].deepStrictEqual(responses, expectedResponse);
            _assert["default"].deepStrictEqual(client.descriptors.page.listTasks.asyncIterate.getCall(0).args[1], request);
            (0, _assert["default"])(client.descriptors.page.listTasks.asyncIterate.getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
          case 41:
          case "end":
            return _context74.stop();
        }
      }, _callee74, null, [[12, 24, 28, 38], [29,, 33, 37]]);
    })));
    (0, _mocha.it)('uses async iteration with listTasks with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee76() {
      var client, request, defaultValue1, expectedHeaderRequestParams, expectedError, iterable;
      return _regeneratorRuntime().wrap(function _callee76$(_context76) {
        while (1) switch (_context76.prev = _context76.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new protos.google.cloud.tasks.v2.ListTasksRequest());
            defaultValue1 = getTypeDefaultValue('.google.cloud.tasks.v2.ListTasksRequest', ['parent']);
            request.parent = defaultValue1;
            expectedHeaderRequestParams = "parent=".concat(defaultValue1 !== null && defaultValue1 !== void 0 ? defaultValue1 : '');
            expectedError = new Error('expected');
            client.descriptors.page.listTasks.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            iterable = client.listTasksAsync(request);
            _context76.next = 11;
            return _assert["default"].rejects(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee75() {
              var responses, _iteratorAbruptCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, resource;
              return _regeneratorRuntime().wrap(function _callee75$(_context75) {
                while (1) switch (_context75.prev = _context75.next) {
                  case 0:
                    responses = [];
                    _iteratorAbruptCompletion4 = false;
                    _didIteratorError4 = false;
                    _context75.prev = 3;
                    _iterator4 = _asyncIterator(iterable);
                  case 5:
                    _context75.next = 7;
                    return _iterator4.next();
                  case 7:
                    if (!(_iteratorAbruptCompletion4 = !(_step4 = _context75.sent).done)) {
                      _context75.next = 13;
                      break;
                    }
                    resource = _step4.value;
                    responses.push(resource);
                  case 10:
                    _iteratorAbruptCompletion4 = false;
                    _context75.next = 5;
                    break;
                  case 13:
                    _context75.next = 19;
                    break;
                  case 15:
                    _context75.prev = 15;
                    _context75.t0 = _context75["catch"](3);
                    _didIteratorError4 = true;
                    _iteratorError4 = _context75.t0;
                  case 19:
                    _context75.prev = 19;
                    _context75.prev = 20;
                    if (!(_iteratorAbruptCompletion4 && _iterator4["return"] != null)) {
                      _context75.next = 24;
                      break;
                    }
                    _context75.next = 24;
                    return _iterator4["return"]();
                  case 24:
                    _context75.prev = 24;
                    if (!_didIteratorError4) {
                      _context75.next = 27;
                      break;
                    }
                    throw _iteratorError4;
                  case 27:
                    return _context75.finish(24);
                  case 28:
                    return _context75.finish(19);
                  case 29:
                  case "end":
                    return _context75.stop();
                }
              }, _callee75, null, [[3, 15, 19, 29], [20,, 24, 28]]);
            })));
          case 11:
            _assert["default"].deepStrictEqual(client.descriptors.page.listTasks.asyncIterate.getCall(0).args[1], request);
            (0, _assert["default"])(client.descriptors.page.listTasks.asyncIterate.getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
          case 13:
          case "end":
            return _context76.stop();
        }
      }, _callee76);
    })));
  });
  (0, _mocha.describe)('getLocation', function () {
    (0, _mocha.it)('invokes getLocation without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee77() {
      var client, request, expectedHeaderRequestParams, expectedOptions, expectedResponse, response;
      return _regeneratorRuntime().wrap(function _callee77$(_context77) {
        while (1) switch (_context77.prev = _context77.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new _googleGax.LocationProtos.google.cloud.location.GetLocationRequest());
            request.name = '';
            expectedHeaderRequestParams = 'name=';
            expectedOptions = {
              otherArgs: {
                headers: {
                  'x-goog-request-params': expectedHeaderRequestParams
                }
              }
            };
            expectedResponse = generateSampleMessage(new _googleGax.LocationProtos.google.cloud.location.Location());
            client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
            _context77.next = 10;
            return client.getLocation(request, expectedOptions);
          case 10:
            response = _context77.sent;
            _assert["default"].deepStrictEqual(response, [expectedResponse]);
            (0, _assert["default"])(client.locationsClient.getLocation.getCall(0).calledWith(request, expectedOptions, undefined));
          case 13:
          case "end":
            return _context77.stop();
        }
      }, _callee77);
    })));
    (0, _mocha.it)('invokes getLocation without error using callback', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee78() {
      var client, request, expectedHeaderRequestParams, expectedOptions, expectedResponse, promise, response;
      return _regeneratorRuntime().wrap(function _callee78$(_context78) {
        while (1) switch (_context78.prev = _context78.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new _googleGax.LocationProtos.google.cloud.location.GetLocationRequest());
            request.name = '';
            expectedHeaderRequestParams = 'name=';
            expectedOptions = {
              otherArgs: {
                headers: {
                  'x-goog-request-params': expectedHeaderRequestParams
                }
              }
            };
            expectedResponse = generateSampleMessage(new _googleGax.LocationProtos.google.cloud.location.Location());
            client.locationsClient.getLocation = sinon.stub().callsArgWith(2, null, expectedResponse);
            promise = new Promise(function (resolve, reject) {
              client.getLocation(request, expectedOptions, function (err, result) {
                if (err) {
                  reject(err);
                } else {
                  resolve(result);
                }
              });
            });
            _context78.next = 11;
            return promise;
          case 11:
            response = _context78.sent;
            _assert["default"].deepStrictEqual(response, expectedResponse);
            (0, _assert["default"])(client.locationsClient.getLocation.getCall(0));
          case 14:
          case "end":
            return _context78.stop();
        }
      }, _callee78);
    })));
    (0, _mocha.it)('invokes getLocation with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee79() {
      var client, request, expectedHeaderRequestParams, expectedOptions, expectedError;
      return _regeneratorRuntime().wrap(function _callee79$(_context79) {
        while (1) switch (_context79.prev = _context79.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new _googleGax.LocationProtos.google.cloud.location.GetLocationRequest());
            request.name = '';
            expectedHeaderRequestParams = 'name=';
            expectedOptions = {
              otherArgs: {
                headers: {
                  'x-goog-request-params': expectedHeaderRequestParams
                }
              }
            };
            expectedError = new Error('expected');
            client.locationsClient.getLocation = stubSimpleCall(undefined, expectedError);
            _context79.next = 10;
            return _assert["default"].rejects(client.getLocation(request, expectedOptions), expectedError);
          case 10:
            (0, _assert["default"])(client.locationsClient.getLocation.getCall(0).calledWith(request, expectedOptions, undefined));
          case 11:
          case "end":
            return _context79.stop();
        }
      }, _callee79);
    })));
  });
  (0, _mocha.describe)('listLocationsAsync', function () {
    (0, _mocha.it)('uses async iteration with listLocations without error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee80() {
      var client, request, expectedHeaderRequestParams, expectedResponse, responses, iterable, _iteratorAbruptCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, resource;
      return _regeneratorRuntime().wrap(function _callee80$(_context80) {
        while (1) switch (_context80.prev = _context80.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new _googleGax.LocationProtos.google.cloud.location.ListLocationsRequest());
            request.name = '';
            expectedHeaderRequestParams = 'name=';
            expectedResponse = [generateSampleMessage(new _googleGax.LocationProtos.google.cloud.location.Location()), generateSampleMessage(new _googleGax.LocationProtos.google.cloud.location.Location()), generateSampleMessage(new _googleGax.LocationProtos.google.cloud.location.Location())];
            client.locationsClient.descriptors.page.listLocations.asyncIterate = stubAsyncIterationCall(expectedResponse);
            responses = [];
            iterable = client.listLocationsAsync(request);
            _iteratorAbruptCompletion5 = false;
            _didIteratorError5 = false;
            _context80.prev = 11;
            _iterator5 = _asyncIterator(iterable);
          case 13:
            _context80.next = 15;
            return _iterator5.next();
          case 15:
            if (!(_iteratorAbruptCompletion5 = !(_step5 = _context80.sent).done)) {
              _context80.next = 21;
              break;
            }
            resource = _step5.value;
            responses.push(resource);
          case 18:
            _iteratorAbruptCompletion5 = false;
            _context80.next = 13;
            break;
          case 21:
            _context80.next = 27;
            break;
          case 23:
            _context80.prev = 23;
            _context80.t0 = _context80["catch"](11);
            _didIteratorError5 = true;
            _iteratorError5 = _context80.t0;
          case 27:
            _context80.prev = 27;
            _context80.prev = 28;
            if (!(_iteratorAbruptCompletion5 && _iterator5["return"] != null)) {
              _context80.next = 32;
              break;
            }
            _context80.next = 32;
            return _iterator5["return"]();
          case 32:
            _context80.prev = 32;
            if (!_didIteratorError5) {
              _context80.next = 35;
              break;
            }
            throw _iteratorError5;
          case 35:
            return _context80.finish(32);
          case 36:
            return _context80.finish(27);
          case 37:
            _assert["default"].deepStrictEqual(responses, expectedResponse);
            _assert["default"].deepStrictEqual(client.locationsClient.descriptors.page.listLocations.asyncIterate.getCall(0).args[1], request);
            (0, _assert["default"])(client.locationsClient.descriptors.page.listLocations.asyncIterate.getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
          case 40:
          case "end":
            return _context80.stop();
        }
      }, _callee80, null, [[11, 23, 27, 37], [28,, 32, 36]]);
    })));
    (0, _mocha.it)('uses async iteration with listLocations with error', /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee82() {
      var client, request, expectedHeaderRequestParams, expectedError, iterable;
      return _regeneratorRuntime().wrap(function _callee82$(_context82) {
        while (1) switch (_context82.prev = _context82.next) {
          case 0:
            client = new cloudtasksModule.v2.CloudTasksClient({
              credentials: {
                client_email: 'bogus',
                private_key: 'bogus'
              },
              projectId: 'bogus'
            });
            client.initialize();
            request = generateSampleMessage(new _googleGax.LocationProtos.google.cloud.location.ListLocationsRequest());
            request.name = '';
            expectedHeaderRequestParams = 'name=';
            expectedError = new Error('expected');
            client.locationsClient.descriptors.page.listLocations.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            iterable = client.listLocationsAsync(request);
            _context82.next = 10;
            return _assert["default"].rejects(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee81() {
              var responses, _iteratorAbruptCompletion6, _didIteratorError6, _iteratorError6, _iterator6, _step6, resource;
              return _regeneratorRuntime().wrap(function _callee81$(_context81) {
                while (1) switch (_context81.prev = _context81.next) {
                  case 0:
                    responses = [];
                    _iteratorAbruptCompletion6 = false;
                    _didIteratorError6 = false;
                    _context81.prev = 3;
                    _iterator6 = _asyncIterator(iterable);
                  case 5:
                    _context81.next = 7;
                    return _iterator6.next();
                  case 7:
                    if (!(_iteratorAbruptCompletion6 = !(_step6 = _context81.sent).done)) {
                      _context81.next = 13;
                      break;
                    }
                    resource = _step6.value;
                    responses.push(resource);
                  case 10:
                    _iteratorAbruptCompletion6 = false;
                    _context81.next = 5;
                    break;
                  case 13:
                    _context81.next = 19;
                    break;
                  case 15:
                    _context81.prev = 15;
                    _context81.t0 = _context81["catch"](3);
                    _didIteratorError6 = true;
                    _iteratorError6 = _context81.t0;
                  case 19:
                    _context81.prev = 19;
                    _context81.prev = 20;
                    if (!(_iteratorAbruptCompletion6 && _iterator6["return"] != null)) {
                      _context81.next = 24;
                      break;
                    }
                    _context81.next = 24;
                    return _iterator6["return"]();
                  case 24:
                    _context81.prev = 24;
                    if (!_didIteratorError6) {
                      _context81.next = 27;
                      break;
                    }
                    throw _iteratorError6;
                  case 27:
                    return _context81.finish(24);
                  case 28:
                    return _context81.finish(19);
                  case 29:
                  case "end":
                    return _context81.stop();
                }
              }, _callee81, null, [[3, 15, 19, 29], [20,, 24, 28]]);
            })));
          case 10:
            _assert["default"].deepStrictEqual(client.locationsClient.descriptors.page.listLocations.asyncIterate.getCall(0).args[1], request);
            (0, _assert["default"])(client.locationsClient.descriptors.page.listLocations.asyncIterate.getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
          case 12:
          case "end":
            return _context82.stop();
        }
      }, _callee82);
    })));
  });
  (0, _mocha.describe)('Path templates', function () {
    (0, _mocha.describe)('location', function () {
      var fakePath = '/rendered/path/location';
      var expectedParameters = {
        project: 'projectValue',
        location: 'locationValue'
      };
      var client = new cloudtasksModule.v2.CloudTasksClient({
        credentials: {
          client_email: 'bogus',
          private_key: 'bogus'
        },
        projectId: 'bogus'
      });
      client.initialize();
      client.pathTemplates.locationPathTemplate.render = sinon.stub().returns(fakePath);
      client.pathTemplates.locationPathTemplate.match = sinon.stub().returns(expectedParameters);
      (0, _mocha.it)('locationPath', function () {
        var result = client.locationPath('projectValue', 'locationValue');
        _assert["default"].strictEqual(result, fakePath);
        (0, _assert["default"])(client.pathTemplates.locationPathTemplate.render.getCall(-1).calledWith(expectedParameters));
      });
      (0, _mocha.it)('matchProjectFromLocationName', function () {
        var result = client.matchProjectFromLocationName(fakePath);
        _assert["default"].strictEqual(result, 'projectValue');
        (0, _assert["default"])(client.pathTemplates.locationPathTemplate.match.getCall(-1).calledWith(fakePath));
      });
      (0, _mocha.it)('matchLocationFromLocationName', function () {
        var result = client.matchLocationFromLocationName(fakePath);
        _assert["default"].strictEqual(result, 'locationValue');
        (0, _assert["default"])(client.pathTemplates.locationPathTemplate.match.getCall(-1).calledWith(fakePath));
      });
    });
    (0, _mocha.describe)('project', function () {
      var fakePath = '/rendered/path/project';
      var expectedParameters = {
        project: 'projectValue'
      };
      var client = new cloudtasksModule.v2.CloudTasksClient({
        credentials: {
          client_email: 'bogus',
          private_key: 'bogus'
        },
        projectId: 'bogus'
      });
      client.initialize();
      client.pathTemplates.projectPathTemplate.render = sinon.stub().returns(fakePath);
      client.pathTemplates.projectPathTemplate.match = sinon.stub().returns(expectedParameters);
      (0, _mocha.it)('projectPath', function () {
        var result = client.projectPath('projectValue');
        _assert["default"].strictEqual(result, fakePath);
        (0, _assert["default"])(client.pathTemplates.projectPathTemplate.render.getCall(-1).calledWith(expectedParameters));
      });
      (0, _mocha.it)('matchProjectFromProjectName', function () {
        var result = client.matchProjectFromProjectName(fakePath);
        _assert["default"].strictEqual(result, 'projectValue');
        (0, _assert["default"])(client.pathTemplates.projectPathTemplate.match.getCall(-1).calledWith(fakePath));
      });
    });
    (0, _mocha.describe)('queue', function () {
      var fakePath = '/rendered/path/queue';
      var expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        queue: 'queueValue'
      };
      var client = new cloudtasksModule.v2.CloudTasksClient({
        credentials: {
          client_email: 'bogus',
          private_key: 'bogus'
        },
        projectId: 'bogus'
      });
      client.initialize();
      client.pathTemplates.queuePathTemplate.render = sinon.stub().returns(fakePath);
      client.pathTemplates.queuePathTemplate.match = sinon.stub().returns(expectedParameters);
      (0, _mocha.it)('queuePath', function () {
        var result = client.queuePath('projectValue', 'locationValue', 'queueValue');
        _assert["default"].strictEqual(result, fakePath);
        (0, _assert["default"])(client.pathTemplates.queuePathTemplate.render.getCall(-1).calledWith(expectedParameters));
      });
      (0, _mocha.it)('matchProjectFromQueueName', function () {
        var result = client.matchProjectFromQueueName(fakePath);
        _assert["default"].strictEqual(result, 'projectValue');
        (0, _assert["default"])(client.pathTemplates.queuePathTemplate.match.getCall(-1).calledWith(fakePath));
      });
      (0, _mocha.it)('matchLocationFromQueueName', function () {
        var result = client.matchLocationFromQueueName(fakePath);
        _assert["default"].strictEqual(result, 'locationValue');
        (0, _assert["default"])(client.pathTemplates.queuePathTemplate.match.getCall(-1).calledWith(fakePath));
      });
      (0, _mocha.it)('matchQueueFromQueueName', function () {
        var result = client.matchQueueFromQueueName(fakePath);
        _assert["default"].strictEqual(result, 'queueValue');
        (0, _assert["default"])(client.pathTemplates.queuePathTemplate.match.getCall(-1).calledWith(fakePath));
      });
    });
    (0, _mocha.describe)('task', function () {
      var fakePath = '/rendered/path/task';
      var expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        queue: 'queueValue',
        task: 'taskValue'
      };
      var client = new cloudtasksModule.v2.CloudTasksClient({
        credentials: {
          client_email: 'bogus',
          private_key: 'bogus'
        },
        projectId: 'bogus'
      });
      client.initialize();
      client.pathTemplates.taskPathTemplate.render = sinon.stub().returns(fakePath);
      client.pathTemplates.taskPathTemplate.match = sinon.stub().returns(expectedParameters);
      (0, _mocha.it)('taskPath', function () {
        var result = client.taskPath('projectValue', 'locationValue', 'queueValue', 'taskValue');
        _assert["default"].strictEqual(result, fakePath);
        (0, _assert["default"])(client.pathTemplates.taskPathTemplate.render.getCall(-1).calledWith(expectedParameters));
      });
      (0, _mocha.it)('matchProjectFromTaskName', function () {
        var result = client.matchProjectFromTaskName(fakePath);
        _assert["default"].strictEqual(result, 'projectValue');
        (0, _assert["default"])(client.pathTemplates.taskPathTemplate.match.getCall(-1).calledWith(fakePath));
      });
      (0, _mocha.it)('matchLocationFromTaskName', function () {
        var result = client.matchLocationFromTaskName(fakePath);
        _assert["default"].strictEqual(result, 'locationValue');
        (0, _assert["default"])(client.pathTemplates.taskPathTemplate.match.getCall(-1).calledWith(fakePath));
      });
      (0, _mocha.it)('matchQueueFromTaskName', function () {
        var result = client.matchQueueFromTaskName(fakePath);
        _assert["default"].strictEqual(result, 'queueValue');
        (0, _assert["default"])(client.pathTemplates.taskPathTemplate.match.getCall(-1).calledWith(fakePath));
      });
      (0, _mocha.it)('matchTaskFromTaskName', function () {
        var result = client.matchTaskFromTaskName(fakePath);
        _assert["default"].strictEqual(result, 'taskValue');
        (0, _assert["default"])(client.pathTemplates.taskPathTemplate.match.getCall(-1).calledWith(fakePath));
      });
    });
  });
});